#!/usr/bin/python3
import bibtexparser
import unicodedata
from subprocess import Popen,PIPE
import argparse

filepath = "/home/thomas/bib/mybib.bib";
document_folder = "/home/thomas/bib/";
pdf_open_command = "okular";
number_str_color = "blue";
author_str_color = "green";
title_str_color = "yellow";
chars_to_remove = ["{","}"];

def search_fields(database,pattern,field_name):
# Search for pattern in the entries of the database.
# Normalize the strings to enable lazy searching.
	pattern_norm = normalize_str(pattern);
	results = [];
	for ind,entry in enumerate(database.entries):
		if not(field_name in entry): continue
		search_str = normalize_str(entry[field_name]);
		if -1 != search_str.find(pattern_norm):
			results.append(ind);
	return results;

def normalize_str(str):
# Normalize string for searching purpose.
	return "".join((c for c in unicodedata.normalize('NFKD', str) if unicodedata.category(c) != 'Mn')).lower();

def colored_str(string,color):
# Make a string appear in either 'red', 'green', 'yellow' or 'blue'.
# Return the input if color is not supported.
	# Define the colors
	colors = {	"red" : "0;31;40", "green" : "0;32;40", "yellow" : "0;33;40",
	 			"blue" : "0;34;40"};
	if color in colors:
		return "\x1b[{}m{}\x1b[0m".format(colors[color],string);
	else:
		return string;

def main():
	parser = argparse.ArgumentParser()
	parser.add_argument("pattern", nargs='?', default="", help="pattern to be searched for in author, title, year and keywords. only considered if no other search option is given.");
	parser.add_argument("-a","--author", help="search result include author");
	parser.add_argument("-t","--title", help="search result include title");
	parser.add_argument("-y","--year", help="search result include year");
	parser.add_argument("-k","--keyword", help="search result include keyword");
	args = parser.parse_args()
	pattern = args.pattern;

	# Load database from file.
	with open(filepath) as bibtex_file:
		bib_parser = bibtexparser.bparser.BibTexParser();
		bib_parser.ignore_nonstandard_types = False;
		bib_parser.homogenise_fields = True;
		bib_database = bibtexparser.load(bibtex_file, bib_parser);
	num_entries = len(bib_database.entries);

	result = [];
	if not(args.author or args.title or args.year or args.keyword):
		fields_to_search = ["author","title","year","keywords"];
		# Search the database
		for field in fields_to_search:
			result = list(set(
					result + search_fields(bib_database,pattern,field)));
	else:
		# Prepare a list with all indices to use for intersection later.
		result = list(range(0,len(bib_database.entries)));

	if args.author:
		pattern = normalize_str(args.author);
		result = list( set(result) & set(
					search_fields(bib_database,pattern,"author")))
	if args.title:
		pattern = normalize_str(args.title);
		result = list( set(result) & set(
					search_fields(bib_database,pattern,"title")));
	if args.year:
		pattern = normalize_str(args.year);
		result = list( set(result) & set(
					search_fields(bib_database,pattern,"year")));
	if args.keyword:
		pattern = normalize_str(args.keyword);
		result = list( set(result) & set(
					search_fields(bib_database,pattern,"keywords")));

	# Sort for ordered output
	result = sorted(result);

	for n,ind in enumerate(result):
		entry = bib_database.entries[ind];
		number_str = colored_str("➡️ {:02}".format(n+1),number_str_color);
		author_str = colored_str(entry["author"], author_str_color);
		title_str = colored_str(entry["title"],title_str_color);
		url_str = "";
		url_synonym_list = ["url", "urls", "link", "links", "adsurl"];
		for url_word in url_synonym_list:
			if url_word in entry:
				url_str = entry[url_word];
		entry_str = "{}\t{}\n\t{}".format(number_str, author_str, title_str);
		entry_str = "".join([entry_str,"\n\t{}".format(url_str)]);
		entry_str = "".join(c for c in entry_str if not c in chars_to_remove);
		print(entry_str);

	# Exit, if there are no results.
	if len(result) == 0:
		return;

	# Ask for the number of the document to be opened.
	choice = input("Select number to open : " );
	# Exit if input is something else than a number
	try:
		open_ind = int(choice);
	except ValueError:
		return;
	if open_ind-1 in range(len(result)):
		entry = bib_database.entries[result[open_ind-1]];
		if "file" in entry:
			document_filepath = entry["file"];
			command = [pdf_open_command,"{}{}".format(document_folder,document_filepath)];
			Popen(command,stdout=PIPE,stderr=PIPE);
		else:
			print("No filepath given in database.");

if __name__=="__main__":
	main();
